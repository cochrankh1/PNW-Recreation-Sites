<html>
<head>
    <meta charset="UTF-8">
    <title>Oregon/Washington BLM Recreational Sites (2024)</title>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.0/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.14.0/css/all.css">
    <link href="https://fonts.googleapis.com/css?family=Titillium+Web" rel="stylesheet">

    <style>
        html, body, #map { width: 100%; height: 100%; margin: 0; background: #fff; }

        .legend {
            line-height: 40px;
            font-size: 16px;
            width: 190px;
            color: #333333;
            padding: 6px 8px;
            background: white;
            background: rgba(255,255,255,0.5);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
            font-family: 'Monaco', sans-serif;
        }
       
        .legend i {
            width: 20px;
            height: 20px;
            float: left;
            margin-right: 8px;
            opacity: 0.9;
        }

        .legend img {
            width: 16px;
            height: 16px;
            margin-right: 3px;
            float: left;
        }

        .legend p {
            font-size: 14px;
            line-height: 20px;
            margin: 0;
        }

    </style>

    <script src="https://unpkg.com/leaflet@1.7.0/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-ajax/2.1.0/leaflet.ajax.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.4/chroma.min.js"></script>
</head>

<body>
    <!-- Our web map and content will go here -->
    <div id="map"></div>
    
    <script>
    // 1. Create a map object.
    var mymap = L.map('map', {
        center: [45.828320, -120.272067], //note that we've centered the map to Oregon and Washington
        zoom: 6.4, //this line adjusts the starting zoom level of the map
        maxZoom: 17,//this line sets the maximum zoom level
        minZoom: 5,//this line sets the minimum zoom level
        detectRetina: true // detect whether the sceen is high resolution or not.
    });

    // 2. Add a base map.
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png',).addTo(mymap);

    // 3. Add Recreation Site GeoJSON Data
    // Null variable that will hold Recreation Site data
    var data = null;
   
    // 4. build up a set of colors from colorbrewer's dark2 category
    var colors = chroma.scale('Dark2').mode('lch').colors(3);
    // 5. dynamically append style classes to this page. The style classes will be used to shade the markers.
    // We can use a for loop to do this.
    for (i = 0; i < 3; i++) {
    $('head').append($("<style> .marker-color-" + (i + 1).toString() + " { color: " + colors[i] + "; font-size: 15px; text-shadow: 0 0 3px #ffffff;} </style>"));
    }
    // Get GeoJSON and put it on the map when it loads
    // Make sure you have the correct directory path below
    data = L.geoJson.ajax("assets/data.geojson",{

        // assign a function to the onEachFeature parameter of the data object.
        // Then each (point) feature will have a popup window.
        // The content of the popup window is the value of `Original_Feature` from the attribute table
        onEachFeature: function (feature, layer) {
            layer.bindPopup(feature.properties.Original_Feature);
        },

        pointToLayer: function(feature, latlng) {
            var id = 0;
            if (feature.properties.Original_Feature == "Campsite") { id = 0; }
            else if (feature.properties.Original_Feature == "Trailhead")  { id = 1; }
            else { id = 2;} // All other property types from attribute table -- FIGURE OUT HOW TO CHANGE ICON
            return L.marker(latlng, {icon: L.divIcon({
                className: 'fas fa-campground marker-color-' + (id + 1).toString() })});
        },

        attribution: 'BLM Recreational Sites; DATA.GOV | Oregon/Washington County Boundaries; GEOHub Data | Base Map & copy; OpenStreetMap | Map Author: K. Cochran'
    });
    // Add the Recreation sites to the map.
    data.addTo(mymap);

    // 6. Set function for color ramp
    colors = chroma.scale('Purples').colors(5); //we'll use 5 classes of purples
    // this function manually defines your choropleth classification system
    //so you'll need to figure out which break points you'd like to use
    //based on the data distribution
    //this equal interval classification with 5 classes, takes the range of the

    function setColor(density) {
        var id = 0;
        if (density > 300) { id = 4; } 
        else if (density > 150 && density <= 300) { id = 3; } 
        else if (density > 50 && density <= 150) { id = 2; } 
        else if (density > 5 && density <= 50) { id = 1; } 
        else { id = 0; }
        return colors[id];
    }

    // 7. Set style function that sets fill color property equal to total recreation sites
    function style(feature) {
        return {
            fillColor: setColor(feature.properties.NUMPOINTS),
            fillOpacity: 0.5,
            weight: 2,
            opacity: 1,
            color: '#b4b4b4',
            dashArray: '4'
    };
    }

    // 8. Add county polygons
    L.geoJson.ajax("assets/County_Sites.geojson", {
    style: style
    }).addTo(mymap);

    // 9. Create Leaflet Control Object for Legend
    var legend = L.control({position: 'topright'});
   
    // 10. Function that runs when legend is added to map
    legend.onAdd = function () {
        
        // Create Div Element and Populate it with HTML
        var div = L.DomUtil.create('div', 'legend');
        //this line creates a title for the choropleth part of the legend
        div.innerHTML += '<b>BLM Recreation Sites Per County</b><br />';
        //notice the class breaks entered at the end of the next 5 lines
        //the colors specify the shade of purple that we used to do the polygon shading
        div.innerHTML += '<i style="background: ' + colors[4] + '; opacity: 0.5"></i><p>300+</p>';
        div.innerHTML += '<i style="background: ' + colors[3] + '; opacity: 0.5"></i><p>150-300</p>';
        div.innerHTML += '<i style="background: ' + colors[2] + '; opacity: 0.5"></i><p>50-150</p>';
        div.innerHTML += '<i style="background: ' + colors[1] + '; opacity: 0.5"></i><p>5-50</p>';
        div.innerHTML += '<i style="background: ' + colors[0] + '; opacity: 0.5"></i><p>0-5</p>';
        //this line provides the legend title for the campsite colored symbols
        div.innerHTML += '<hr><b>Recreation Site<b><br />';
        //the next 3 lines call the airbnb icon along with its proper color
        //notice the names of the Airbnb property types listed within the <p> tags at the end of the lines
        div.innerHTML += '<i class="fas fa-campground marker-color-1"></i><p>Campsite</p>';
        div.innerHTML += '<i class="fas fa-campground marker-color-2"></i><p>Trailhead</p>';
        div.innerHTML += '<i class="fas fa-campground marker-color-3"></i><p>Other</p>';
        // Return the Legend div containing the HTML content
        return div;
    };

    // 11. Add a legend to map
    legend.addTo(mymap);

    // 12. Add a scale bar to map
    L.control.scale({position: 'bottomleft'}).addTo(mymap);
    </script>

</body>
</html>
